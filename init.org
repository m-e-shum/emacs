#+title: init.org
#+author: Matt Shum

Commands:
- Use ~C-c C-v C-t~ to /tangle/ ~*init.el~ files.
- Use ~C-c C-v C-d~ to split or /demarcate/ a code block.

* ~pre-init.el~
** Header
#+begin_src emacs-lisp :tangle "pre-init.el" :mkdirp yes
  ;;; pre-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
* ~pre-early-init.el~
** Header
#+begin_src emacs-lisp :tangle "pre-early-init.el" :mkdirp yes
  ;;; pre-early-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
** Remove clutter
#+begin_src emacs-lisp :tangle "pre-early-init.el" :mkdirp yes
  ;; Reducing clutter in ~/.emacs.d by redirecting files to ~/emacs.d/var/
  (setq minimal-emacs-var-dir (expand-file-name "var/" minimal-emacs-user-directory))
  (setq package-user-dir (expand-file-name "elpa" minimal-emacs-var-dir))
  (setq user-emacs-directory minimal-emacs-var-dir)
  (setq custom-file null-device)
#+end_src
* ~post-early-init.el~
** Header
#+begin_src emacs-lisp :tangle "post-early-init.el" :mkdirp yes
  ;;; post-early-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
** Load theme
#+begin_src emacs-lisp :tangle "post-early-init.el" :mkdirp yes
  (load-theme 'modus-vivendi-deuteranopia t)
#+end_src
** Emacs
#+begin_src emacs-lisp :tangle "post-early-init.el" :mkdirp yes
  (use-package emacs
    :ensure nil
    :demand t
    :config
    ;;; General settings
    (setq blink-matching-paren nil)
    (setq help-window-select t)
    :bind
    ( :map global-map
      ("M-c" . capitalize-dwim)
      ("M-l" . downcase-dwim)
      ("M-u" . upcase-dwim)))
#+end_src
* ~post-init.el~
** Header
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;;; post-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src
** Speed up with =compile-angel=
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; Speed up Emacs
  ;; MUST be at the top of this file
  (use-package compile-angel
    :ensure t
    :demand t
    :config
    ;; Set `compile-angel-verbose` to nil to suppress output from compile-angel.
    ;; Drawback: The minibuffer will not display compile-angel's actions.
    (setq compile-angel-verbose t)

    (compile-angel-on-load-mode)
    (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode))
#+end_src
** Auto-revert, recentf, savehist, save-place
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (add-hook 'after-init-hook #'global-auto-revert-mode)

  ;; recentf is an Emacs package that maintains a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (add-hook 'after-init-hook #'(lambda()
                                 (let ((inhibit-message t))
                                   (recentf-mode 1))))
  (add-hook 'kill-emacs-hook #'recentf-cleanup)

  ;; savehist is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (add-hook 'after-init-hook #'savehist-mode)

  ;; save-place-mode enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  (add-hook 'after-init-hook #'save-place-mode)
#+end_src
** Terminal Emulator =vterm=
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; Terminal Emulator in C
  (use-package vterm
    :ensure t
    :defer t
    :commands vterm
    :config
    ;; Speed up vterm
    (setq vterm-timer-delay 0.01))
#+end_src
** Completion
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; Completion
  (use-package vertico
    ;; (Note: It is recommended to also enable the savehist package.)
    :ensure t
    :defer t
    :commands vertico-mode
    :hook (after-init . vertico-mode))

  (use-package orderless
    ;; Vertico leverages Orderless' flexible matching capabilities, allowing users
    ;; to input multiple patterns separated by spaces, which Orderless then
    ;; matches in any order against the candidates.
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    ;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
    ;; In addition to that, Marginalia also enhances Vertico by adding rich
    ;; annotations to the completion candidates displayed in Vertico's interface.
    :ensure t
    :defer t
    :commands (marginalia-mode marginalia-cycle)
    :hook (after-init . marginalia-mode))

  (use-package embark
    ;; Embark is an Emacs package that acts like a context menu, allowing
    ;; users to perform context-sensitive actions on selected items
    ;; directly from the completion interface.
    :ensure t
    :defer t
    :commands (embark-act
               embark-dwim
               embark-export
               embark-collect
               embark-bindings
               embark-prefix-help-command)
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package consult
    :ensure t
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x t b" . consult-buffer-other-tab)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)
           ("M-r" . consult-history))

    ;; Enable automatic preview at point in the *Completions* buffer.
    :hook
    (completion-list-mode . consult-preview-at-point-mode)

    :init
    ;; Optionally configure the register formatting. This improves the register
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))
    (setq consult-line-numbers-widen t)
    (setq consult-narrow-key "<"))

  (use-package corfu
    :ensure t
    :defer t
    :commands (corfu-mode global-corfu-mode)

    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode))

    :custom
    ;; Hide commands in M-x which do not apply to the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Disable Ispell completion function. As an alternative try `cape-dict'.
    (text-mode-ispell-word-completion nil)
    (tab-always-indent 'complete)

    ;; Enable Corfu
    :config
    (global-corfu-mode))

  (use-package cape
    :ensure t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src
** Code folding, crux
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes

  ;; Code Folding
  (use-package outline-indent
    :ensure t
    :defer t
    :commands outline-indent-minor-mode

    :init
    ;; The minor mode can also be automatically activated for a certain modes.
    ;; For example for Python and YAML:
    (add-hook 'python-mode-hook #'outline-indent-minor-mode)
    (add-hook 'python-ts-mode-hook #'outline-indent-minor-mode)

    (add-hook 'yaml-mode-hook #'outline-indent-minor-mode)
    (add-hook 'yaml-ts-mode-hook #'outline-indent-minor-mode)

    :custom
    (outline-indent-ellipsis " ▼ "))

  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)))
#+end_src
** EGLOT
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; EGLOT
  (use-package eglot
    :ensure nil
    :defer t
    :bind (:map eglot-mode-map
                ("C-c C-d" . eldoc)
                ("C-c C-f" . eglot-format-buffer))
    :commands (eglot
               eglot-ensure
               eglot-rename
               eglot-format-buffer))

  ;; Python
  (setq-default eglot-workspace-configuration
                `(:pylsp (:plugins
                          (;; Fix imports and syntax using `eglot-format-buffer`
                           :jedi_completion (:include_params t :fuzzy t)
                           :ruff (:enabled t :formatEnabled t :linelength 88 :format ["I"])
                           ;; Syntax checkers (works with Flymake)
                           ;; :pylint (:enabled t)
                           ;; :pycodestyle (:enabled t)
                           ;; :flake8 (:enabled t)
                           ;; :pyflakes (:enabled t)
                           ;; :pydocstyle (:enabled t)
                           ;; :mccabe (:enabled t)
                           ;; 
                           ;; :yapf (:enabled :json-false)
                           ;; :rope_autoimport (:enabled :json-false)
                           ))))

  (add-hook 'python-mode-hook #'eglot)
  (add-hook 'python-ts-mode-hook #'eglot)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
** Markdown
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;;; Markdown (markdown-mode)
  (use-package markdown-mode
    :ensure t
    :defer t
    :config
    (setq markdown-fontify-code-blocks-natively t))

  (add-hook 'markdown-mode-hook 'auto-fill-mode)
  (add-hook 'markdown-mode-hook (lambda () (set-fill-column 80)))
#+end_src
** Make
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  (use-package make-mode
    :ensure t
    :mode ("Makefile\..*" . makefile-gmake-mode)
    )
#+end_src
** Sessions (NOT implemented)
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; (use-package easysession
  ;; :ensure nil
  ;; :defer t
  ;; :commands (easysession-switch-to
  ;;            easysession-save-as
  ;;            easysession-save-mode
  ;;            easysession-load-including-geometry)
  ;; 
  ;; :custom
  ;; (easysession-mode-line-misc-info t)  ; Display the session in the modeline
  ;; (easysession-save-interval (* 10 60))  ; Save every 10 minutes
  ;; 
  ;; :init
  ;; ;; Key mappings:
  ;; ;; C-c l for switching sessions
  ;; ;; and C-c s for saving the current session
  ;; (global-set-key (kbd "C-c l") 'easysession-switch-to)
  ;; (global-set-key (kbd "C-c s") 'easysession-save-as)
  ;; 
  ;; ;; The depth 102 and 103 have been added to to `add-hook' to ensure that the
  ;; ;; session is loaded after all other packages. (Using 103/102 is particularly
  ;; ;; useful for those using minimal-emacs.d, where some optimizations restore
  ;; ;; `file-name-handler-alist` at depth 101 during `emacs-startup-hook`.)
  ;; (add-hook 'emacs-startup-hook #'easysession-load-including-geometry 102)
  ;; (add-hook 'emacs-startup-hook #'easysession-save-mode 103))
#+end_src
** Other Customizations
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; Other customizations
  ;; Hide warnings and display only errors
  (setq warning-minimum-level :error)

  (use-package which-key
    :ensure nil ; builtin
    :defer t
    :commands which-key-mode
    :hook (after-init . which-key-mode)
    :custom
    (which-key-idle-delay 1.5)
    (which-key-idle-secondary-delay 0.25)
    (which-key-add-column-padding 1)
    (which-key-max-description-length 40))

  (unless (and (eq window-system 'mac)
               (bound-and-true-p mac-carbon-version-string))
    ;; Enables `pixel-scroll-precision-mode' on all operating systems and Emacs
    ;; versions, except for emacs-mac.
    ;;
    ;; Enabling `pixel-scroll-precision-mode' is unnecessary with emacs-mac, as
    ;; this version of Emacs natively supports smooth scrolling.
    ;; https://bitbucket.org/mituharu/emacs-mac/commits/65c6c96f27afa446df6f9d8eff63f9cc012cc738
    (setq pixel-scroll-precision-use-momentum nil) ; Precise/smoother scrolling
    (pixel-scroll-precision-mode 1))

  ;; Display the time in the modeline
  (display-time-mode 1)

  ;; Paren match highlighting
  (show-paren-mode 1)

  ;; Track changes in the window configuration, allowing undoing actions such as
  ;; closing windows.
  (winner-mode 1)

  ;; Replace selected text with typed text
  (delete-selection-mode 1)

  ;; Configure Emacs to ask for confirmation before exiting
  (setq confirm-kill-emacs 'y-or-n-p)

  (use-package uniquify
    :ensure nil
    :custom
    (uniquify-buffer-name-style 'reverse)
    (uniquify-separator "•")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*"))

  ;; Window dividers separate windows visually. Window dividers are bars that can
  ;; be dragged with the mouse, thus allowing you to easily resize adjacent
  ;; windows.
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Dividers.html
  (add-hook 'after-init-hook #'window-divider-mode)

  ;; Dired buffers: Automatically hide file details (permissions, size,
  ;; modification date, etc.) and all the files in the `dired-omit-files' regular
  ;; expression for a cleaner display.
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  ;; Enable on-the-fly spell checking (Flyspell mode).
  ;;(add-hook text-mode-hook #'flyspell-mode) ;; broken Emacs 30
#+end_src
** Visuals:
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  (use-package hl-line
    :ensure nil
    :commands (hl-line-mode)
    :config
    (setq hl-line-sticky-flag nil)
    (setq hl-line-overlay-priority -50)
    )

  (use-package pulsar
    :ensure t
    :config
    (setopt pulsar-pulse t
            pulsar-delay 0.055
            pulsar-iterations 10
            pulsar-face 'pulsar-magenta
            pulsar-highlight-face 'pulsar-yellow)
    (pulsar-global-mode 1)  
    )

  (use-package lin
    :ensure t
    :hook (after-init . lin-global-mode)
    :config
    (setq lin-face 'lin-magenta))

  (use-package spacious-padding
    :ensure t
    :hook (after-init . spacious-padding-mode)
    :init
    ;; These are defaults
    (setq spacious-padding-widths
          '( :internal-border-width 30
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 30
             :scroll-bar-width 8
             :left-fringe-width 20
             :right-fringe-width 20)))

  (use-package whitespace
    :ensure nil
    )

  (use-package display-line-numbers
    :ensure nil
    :config
    (setq-default display-line-numbers-type t)
    (setq display-line-numbers-major-tick 0)
    (setq display-line-numbers-minor-tick 0)
    (setq-default display-line-numbers-widen t))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** GIT
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;;GIT
  (use-package magit
    :demand t
    :bind ("C-x g" . magit-status)
    :init
    (setq magit-define-global-key-bindings nil)
    (setq magit-section-visibility-indicator '(" 󰅀"))
    :config
    (setq git-commit-summary-max-length 50)
    ;; NOTE 2023-01-24: I used to also include `overlong-summary-line'
    ;; in this list, but I realised I do not need it.  My summaries are
    ;; always in check.  When I exceed the limit, it is for a good
    ;; reason.
    (setq git-commit-style-convention-checks '(non-empty-second-line))

    (setq magit-diff-refine-hunk t)

    )
#+end_src
** ORG mode
#+begin_src emacs-lisp :tangle "post-init.el" :mkdirp yes
  ;; ORG mode
  (use-package org
    :ensure t
    :mode (("\\.org$" . org-mode))
    :preface
    (defun my-first-existing-directory (directories)
      "Return the first existing directory from the given list DIRECTORIES.
       The directory path is expanded to its absolute path."
      (catch 'found
        (dolist (dir directories)
          (when (file-directory-p dir)
            (throw 'found (expand-file-name dir))))
        nil))  ;; Return nil if no existing directory is found
    :config
    (setq org-startup-indented t ;; auto aligns text with header
          org-startup-folded t ;; startup folded
          org-ellipsis " 󰅀 " ;; folding symbol
          org-directory (my-first-existing-directory '("/home/shumma1/notes/2025"
                                                       "/Users/shumma1/notes/2025"))
          org-agenda-files `(,org-directory)
          org-hide-emphasis-markers nil
          org-pretty-entities t
          org-return-follows-link t
          org-fontify-quote-and-verse-blocks t
          org-fontify-whole-block-delimiter-line t
          org-fontify-done-headline nil
          org-fontify-todo-headline nil
          org-fontify-whole-heading-line nil
          org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t
          org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)")
                              (sequence "|" "CONSIDER(s)" "WAITING(w)" "CANCELLED(c)"))
          ))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))

  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src


