#+title: Config
#+author: Matt Shum

To evaluate code blocks in Org Mode, use ~C-c C-v C-t~ (aka =(org-babel-tangle)=
to write to the file specified). **Note**: consecutive code blocks tangled to
the same file will be appended (no need to worry about duplicates entries).

Commands:
- ~C-c C-v C-t~ =(org-babel-tangle)=: to tangle a code block to a file
- ~C-c C-v C-d~ =(org-babel-demarcate-block)=: to split a code block into
  separate code blocks with the same code block headers

* ~early-init.el~

General UI settings:

#+begin_src emacs-lisp :tangle "early-init.el"
  (setq frame-resize-pixelwise t
	frame-inhibit-implied-resize t
	frame-title-format '("%b")
	ring-bell-function 'ignore
	use-dialog-box t ; only for mouse events, which I seldom use
	use-file-dialog nil
	use-short-answers t
	inhibit-splash-screen t
	inhibit-startup-screen t
	inhibit-x-resources t
	inhibit-startup-echo-area-message user-login-name ; read the docstring
	inhibit-startup-buffer-menu t)

  ;; graphical elements
  (menu-bar-mode -1)
  ;; below two modes don't show for emacs -nw (?)
  ;;(scroll-bar-mode -1)
  ;;(tool-bar-mode -1)
#+end_src

For startup purposes:

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Temporarily increase the garbage collection threshold.  These
  ;; changes help shave off about half a second of startup time.  The
  ;; `most-positive-fixnum' is DANGEROUS AS A PERMANENT VALUE.  See the
  ;; `emacs-startup-hook' a few lines below for what I actually use.
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.5)

  ;; Same idea as above for the `file-name-handler-alist' and the
  ;; `vc-handled-backends' with regard to startup speed optimisation.
  ;; Here I am storing the default value with the intent of restoring it
  ;; via the `emacs-startup-hook'.
  (defvar matte-macs--file-name-handler-alist file-name-handler-alist)
  (defvar matte-macs--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
	vc-handled-backends nil)

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold (* 1000 1000 8)
		    gc-cons-percentage 0.1
		    file-name-handler-alist matte-macs--file-name-handler-alist
		    vc-handled-backends matte-macs--vc-handled-backends)))

  ;; Initialise installed packages at this early stage, by using the
  ;; available cache.  I had tried a setup with this set to nil in the
  ;; early-init.el, but (i) it ended up being slower and (ii) various
  ;; package commands, like `describe-package', did not have an index of
  ;; packages to work with, requiring a `package-refresh-contents'.
  (setq package-enable-at-startup t)

  (add-hook 'after-init-hook (lambda () (set-frame-name "home")))
#+end_src
* ~init.el~

  #+begin_src emacs-lisp :tangle "init.el"
    ;; Group 
    (defgroup matte-macs nil
      "User options for my dotemacs.
		These produce the expected results only when set in a file called
		matte-macs-pre-custom.el.  This file must be in the same
		directory as the init.el."
      :group 'file)

    (defcustom matte-macs-load-theme-family 'modus
      "Set of themes to load.
    Valid values are the symbols `ef', `modus', and `standard', which
    reference the `ef-themes', `modus-themes', and `standard-themes',
    respectively.

    A nil value does not load any of the above (use Emacs without a
    theme).

    This user option must be set in the `matte-macs-pre-custom.el'
    file.  If that file exists in the Emacs directory, it is loaded
    before all other modules of my setup."
      :group 'matte-macs
      :type '(choice :tag "Set of themes to load" :value modus
		     (const :tag "The `ef-themes' module" ef)
		     (const :tag "The `modus-themes' module" modus)
		     (const :tag "The `standard-themes' module" standard)
		     (const :tag "Do not load a theme module" nil)))

  #+end_src

  #+begin_src emacs-lisp :tangle "init.el"

       ;; Turn off backups
       (setq make-backup-files nil)
       (setq backup-inhibited nil) ; Not sure if needed, given `make-backup-files'
       (setq create-lockfiles nil)

       ;; Make native compilation silent and prune its cache.
       (when (native-comp-available-p)
	 (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
	 (setq native-compile-prune-cache t)) ; Emacs 29

       ;; Disable the damn thing by making it disposable.
       (setq custom-file (make-temp-file "emacs-custom-"))

       ;; Enable these
       (mapc
	(lambda (command)
	  (put command 'disabled nil))
	'(list-timers narrow-to-region narrow-to-page upcase-region downcase-region))

       ;; And disable these
       (mapc
	(lambda (command)
	  (put command 'disabled t))
	'(eshell project-eshell overwrite-mode iconify-frame diary))

    (mapc
     (lambda (string)
       (add-to-list 'load-path (locate-user-emacs-file string)))
     '("matte-macs-lisp" "matte-macs-modules"))
  #+end_src

  #+begin_src emacs-lisp :tangle "init.el"
    (load (locate-user-emacs-file "matte-macs-pre-custom.el") :no-error :no-message)
    ;; preferences BEFORE loading any of the modules.

    (require 'matte-macs-theme)
    ;; (require 'matte-macs-essentials)
    ;; (require 'matte-macs-modeline)
    ;; (require 'matte-macs-completion)
    ;; (require 'matte-macs-search)
    ;; (require 'matte-macs-dired)
    ;; (require 'matte-macs-window)
    ;; (require 'matte-macs-git)
    ;; (require 'matte-macs-org)
    ;; (require 'matte-macs-langs)
    ;; (require 'matte-macs-email)
    ;; (require 'matte-macs-web)
    ;; (when matte-macs-load-which-key
    ;;   (require 'matte-macs-which-key))
    ;; (when matte-macs-load-icons
    ;;   (require 'matte-macs-icons))

    (load (locate-user-emacs-file "matte-macs-post-custom.el") :no-error :no-message)

    (setq custom-safe-themes t)
#+end_src

* ~matte-macs-pre-custom.el~
User setting specifications /before/ modules get loaded.

#+begin_src emacs-lisp :tangle "matte-macs-pre-custom.el"
  (setq matte-macs-load-theme-family 'modus)
#+end_src

* ~matte-macs-post-custom.el~
* modules
** =matte-macs-theme=
#+begin_src emacs-lisp :tangle "matte-macs-modules/matte-macs-theme.el" :mkdirp yes
  ;;; Theme setup and related

  ;;;; Load the desired theme module
  ;; These all reference my packages: `modus-themes', `ef-themes',
  ;; `standard-themes'.
  (when matte-macs-load-theme-family
    (require
     (pcase matte-macs-load-theme-family
       ;;('ef 'matte-macs-ef-themes)
       ('modus 'matte-macs-modus-themes)
       ;;('standard 'matte-macs-standard-themes)
       )))

  (provide 'matte-macs-theme)
#+end_src
** =matte-macs-modus-themes=
#+begin_src emacs-lisp :tangle "matte-macs-modules/matte-macs-modus-themes.el" :mkdirp yes
  ;; The themes are highly customisable.  Read the manual:
  ;; <https://protesilaos.com/emacs/modus-themes>.
  (use-package modus-themes
    :ensure t
    :demand t
    :bind (("<f5>" . modus-themes-toggle)
	   ("C-<f5>" . modus-themes-select))
    :config
    (setq modus-themes-custom-auto-reload nil
	  modus-themes-to-toggle '(modus-vivendi modus-vivendi-tritanopia)
	  ;; modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
	  ;; modus-themes-to-toggle '(modus-operandi-deuteranopia modus-vivendi-deuteranopia)
	  ;; modus-themes-to-toggle '(modus-operandi-tritanopia modus-vivendi-tritanopia)
	  modus-themes-mixed-fonts t
	  modus-themes-variable-pitch-ui t
	  modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil
	  modus-themes-completions '((t . (extrabold)))
	  modus-themes-prompts '(extrabold)
	  modus-themes-headings
	  '((agenda-structure . (variable-pitch light 2.2))
	    (agenda-date . (variable-pitch regular 1.3))
	    (t . (regular 1.15))))

    (setq modus-themes-common-palette-overrides nil)

    (modus-themes-load-theme (car modus-themes-to-toggle))

    ;; (if (matte-macs-theme-environment-dark-p)
    ;;     (modus-themes-load-theme (cadr modus-themes-to-toggle))
    ;;   (modus-themes-load-theme (car modus-themes-to-toggle))
    ;;  )
    )

  (provide 'matte-macs-modus-themes)

#+end_src
