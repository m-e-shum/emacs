#+AUTHOR: Matt Shum
#+TITLE: dotemacs

Inspired by the maintainer of =emacs=, John Wiegley.

* Startup
** use-package
#+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (defsubst emacs-path (path)
        (expand-file-name path user-emacs-directory))
      (setq-local package-enable-at-startup nil
                  load-path
                  (append (list (emacs-path "use-package"))
                          (delete-dups load-path)
                          (list (emacs-path "lisp")))))

    (require 'use-package)

    (setq use-package-verbose init-file-debug
          use-package-expand-minimally (not init-file-debug)
          use-package-compute-statistics t
          debug-on-error init-file-debug)
#+END_SRC
** emacs
Top level.
#+BEGIN_SRC emacs-lisp
  ;;; Garbage collection
  (setq gc-cons-percentage 0.5
        gc-cons-threshold (* 128 1024 1024))
  ;;; Emacs defaults
  (use-package emacs
    :custom
    (fill-column 81) ;; max line width (for 1/2 of iterm)
    (inhibit-startup-message t)
    (initial-scratch-message nil)
    (user-full-name "Matthew Shum")
    (user-mail-address "shumlee12@gmail.com")
    (enable-recursive-minibuffers t) ;; allows you to invoke commands in minibuffer even when active
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    (menu-bar-mode nil)
    (scroll-bar-mode nil)
    (global-hl-line-mode t)
    (line-number-mode +1)
    (global-display-line-numbers-mode 1)
    (column-number-mode 1)
    (size-indication-mode t)
    (visible-bell t)
    (backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (delete-old-versions t)
    (version-control t)
    (vc-make-backup-files t)
    (frame-resize-pixelwise t)
    (window-sides-vertical t)
    ;;; code
    (indent-tabs-mode nil)
    (tab-width 4)
    ;;; python
    (python-indent-guess-indent-offset nil)
    (python-indent-offset 4)
    ;;; apple stuff
    (mac-command-modifier 'meta)
    (mac-option-modifier 'alt)
    (mac-pass-command-to-system nil)
    ;;; debug
    (debug-on-error t)
    )
  ;;; Garbage collect at the end
  (add-hook 'after-init-hook #'garbage-collect t)
#+END_SRC
During loading, clear ~file-name-handler-alist~.
#+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'after-init-hook
	    #'(lambda ()
		(setq file-name-handler-alist file-name-handler-alist-old)))
#+END_SRC
** warnings
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (dolist (sym '(cl-flet lisp-complete-symbol))
      (setplist sym (use-package-plist-delete
                     (symbol-plist sym) 'byte-obsolete-info))))
#+END_SRC
** mouse
Set up mouse movement to work with emacs.
#+BEGIN_SRC emacs-lisp
  (unless window-system
    (require 'mouse)
    (xterm-mouse-mode t)
    (global-set-key [mouse-4] (lambda()
                                (interactive)
                                (scroll-down 1)))
    (global-set-key [mouse-5] (lambda()
                                (interactive)
                                (scroll-up 1)))
    (setq mouse-sel-mode t))
#+END_SRC
** async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :defer t
    :init (dired-async-mode 1))
#+END_SRC
** appearance
*** Choose Theme
Dracula theme.
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'dracula t)
#+END_SRC
Modus theme. /Note/: we are using ~modus-themes~ 3.0.0. The one that is
preinstalled with =emacs=.
#+BEGIN_SRC emacs-lisp
  ;; Configure the Modus Themes' appearance
  (setq modus-themes-mode-line '(modus-themes-tabs-accented borderless)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-completions '((matches . (extrabold underline))
                                   (selection . (semibold italic)))
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))
  ;; 
  (load-theme 'modus-vivendi t)
#+END_SRC

#+RESULTS:
: t
Spacious Padding.
#+BEGIN_SRC emacs-lisp
  (use-package spacious-padding
    :ensure t
    :hook (after-init . spacious-padding-mode))
#+END_SRC

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26113 35172 677614 701000) :init (26113 35172 677588 952000) :init-secs (0 0 56 748000) :use-package-secs (0 10 117723 880000)))

Highlights.
#+BEGIN_SRC emacs-lisp
  ;;; highlight indent
  (use-package highlight-indent-guides
    :ensure t
    :config
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    (setq highlight-indent-guides-method 'character))
#+END_SRC
*** Nerd icons.
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons
    :ensure t)
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
  (use-package nerd-icons-completion
    :after marginalia
    :hook
    (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode))

#+END_SRC
*** Buffers
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-expert t) ;; stop y/n prompt on delete
    (ibuffer-saved-filter-groups
     '(("default"
        ("Magit"
         (or
          (mode . magit-status-mode)
          (mode . magit-log-mode)
          (name . "\\*magit")
          (name . "magit-")
          (name . "git-monitor")))
        ("Commands"
         (or
          (mode . shell-mode)
          (mode . eshell-mode)
          (mode . term-mode)
          (mode . compilation-mode)))
        ("Python"
         (or
          (mode . python-mode)
          (mode . python-ts-mode)))
        ("Rust"
         (or
          (mode . rust-mode)
          (mode . cargo-mode)
          (name . "\\*Cargo")
          (name . "^\\*rls\\(::stderr\\)?\\*")))
        ("Lisp"
         (mode . emacs-lisp-mode))
        ("Dired"
         (mode . dired-mode))
        ("Org"
         (or
          (name . "^\\*Calendar\\*$")
          (name . "^\\*Org Agenda")
          (name . "^ \\*Agenda")
          (name . "^diary$")
          (mode . org-mode)))
        ("Emacs"
         (or
          (name . "^\\*scratch\\*$")
          (name . "^\\*Messages\\*$")
          (name . "^\\*\\(Customize\\|Help\\)")
          (name . "\\*\\(Echo\\|Minibuf\\)"))))))
     :init
     (add-hook 'ibuffer-mode-hook
               #'(lambda ()
                   (ibuffer-switch-to-saved-filter-groups "default")))
    )
#+END_SRC
*** Modeline
Doom Modeline.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
** ~emacs-lisp~ formatting
Aggressive indent.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :diminish
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+END_SRC
Setting correct mode based on file extension.
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'auto-mode-alist '(".bashrc" . shell-script-mode))
  (add-to-list 'auto-mode-alist '(".yml" . yaml-ts-mode))
#+END_SRC
* ORG
Org-mode.
#+BEGIN_SRC emacs-lisp  
  (use-package org
    :mode (("\\.org$" . org-mode))
    :hook (visual-line-mode . org-mode)
    :init
    (setq org-startup-indented t ;; auto aligns text with header
          org-startup-folded t ;; startup folded
          org-ellipsis " ó°…€ " ;; folding symbol
          org-hide-emphasis-markers nil
          org-pretty-entities t
          org-return-follows-link t
          org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)")
                              (sequence "|" "CONSIDER(s)" "WAITING(w)" "CANCELLED(c)"))
          org-agenda-files '("/da/dmp/cb/shumma1/notes/2024")
          ))
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
  ;;; Coding languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))
#+END_SRC
* Coding
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :mode ("~/.emacs.d/snippets/" . snippet-mode)
    :hook (prog-mode . yas-minor-mode-on) ;; turn on when programming mode detected
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
    (yas-recompile-all)
    (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC
** git
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :demand t
    :bind
    (("C-x g" . magit-status))
    )
#+END_SRC
*** ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff)
#+END_SRC
** Completion
*** Consult
Provides search and navigation commands.
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer))
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    )
  (use-package consult-dir
    :bind (("M-g d" . consult-dir))
    )
  (use-package consult-dir-vertico
    :no-require t
    :after (consult-dir vertico)
    :defines (vertico-map)
    :bind (:map vertico-map
                ("M-g d"   . consult-dir)
                ("M-s f"   . consult-dir-jump-file)))
  (use-package consult-yasnippet
    :after (consult yasnippet))
#+END_SRC
*** Corfu
Completion.
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :demand t
    :bind (("M-/" . completion-at-point)
         :map corfu-map
         ;; Need to learn what's below (put in here b/c completion is important)
         ("C-n"      . corfu-next)
         ("C-p"      . corfu-previous)
         ("<escape>" . corfu-quit)
         ("<return>" . corfu-insert)
         ("M-d"      . corfu-info-documentation)
         ("M-l"      . corfu-info-location)
         ("M-."      . corfu-move-to-minibuffer))
    :custom
    (tab-always-indent 'complete)
    (completion-cycle-threshold nil)
    ;; Only use `corfu' when calling `completion-at-point' or
    ;; `indent-for-tab-command'
    (corfu-auto nil)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-min-width 88)
    (corfu-max-width corfu-min-width) ;; Always have the same width
    (corfu-count 10) ;; max number of candidates to show (default is 10)
    (corfu-cycle nil)
    ;; Other
    (corfu-echo-documentation nil)        ; Already use corfu-popupinfo
    :preface
    (defun corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico/Mct are not active."
      (unless (or (bound-and-true-p mct--active) ; Useful if I ever use MCT
                  (bound-and-true-p vertico--input))
        (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
        (corfu-mode 1)))

    (defun corfu-move-to-minibuffer ()
      (interactive)
      (let (completion-cycle-threshold completion-cycling)
        (apply #'consult-completion-in-region completion-in-region--data)))
    :config
    (global-corfu-mode)
    ;; Nerd icons in corfu
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)

    ;; Enable Corfu more generally for every minibuffer, as long as no other
    ;; completion UI is active. If you use Mct or Vertico as your main
    ;; minibuffer completion UI. From
    ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
    (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
    )
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind (:map corfu-map
                ("M-n" . corfu-popupinfo-scroll-up)
                ("M-p" . corfu-popupinfo-scroll-down)
                ([remap corfu-show-documentation] . corfu-popupinfo-toggle))
    :custom
    (corfu-popupinfo-delay 0.5)
    (corfu-popupinfo-max-width 70)
    (corfu-popupinfo-max-height 20)
    ;; Also here to be extra-safe that this is set when `corfu-popupinfo' is
    ;; loaded. I do not want documentation shown in both the echo area and in
    ;; the `corfu-popupinfo' popup.
    (corfu-echo-documentation nil))
#+END_SRC
*** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :after cape
    :demand t
    :config
    (vertico-mode)
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    ;; Hide commands in M-x which do not work in the current mode. Vertico
    ;; commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)
    )
#+END_SRC
*** Marginalia
Rich highlighting for completion
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init section is always executed.
    :init
    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+END_SRC
*** Cape
To be used in combination with Corfu.
#+BEGIN_SRC emacs-lisp
  (use-package cape
    :demand t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-abbrev))
#+END_SRC
*** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :demand t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides
     '((file (styles basic partial-completion)))))
#+END_SRC
*** Embark
[[https://github.com/oantolin/embark][Embark]]
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
** Languages
*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :demand t
    :mode (("\\`README\\.md\\'" . gfm-mode)
           ("\\.md\\'"          . markdown-mode)
           ("\\.markdown\\'"    . markdown-mode))
    :custom
    ;;(markdown-command "pandoc -f markdown_github+smart")
    (markdown-command-needs-filename t)
    (markdown-enable-math t)
    (markdown-open-command "marked")
    :custom-face
    (markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.0))))
    (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
    (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
    (markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.2))))
    :init
    (setq markdown-command-needs-filename "multimarkdown"))
#+END_SRC
*** Python Environment
Autovirtualenv
#+BEGIN_SRC emacs-lisp
  (use-package auto-virtualenv
     :ensure t
     :init
     (use-package pyvenv
       :ensure t)
     :config
     (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
     )
#+END_SRC
*** Grammar
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+END_SRC
*** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :defer t
    :hook ((bash-ts-mode . eglot-ensure)
           (yaml-ts-mode . eglot-ensure)
           (markdown-mode . eglot-ensure)
           (rust-ts-mode-hook . eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    :config
    (add-to-list 'eglot-server-programs '(python-ts-mode . ("pylsp")))
    (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
    (setq eglot-workspace-configuration
          '( :pylsp (:plugins (:ruff ( :enabled t
                                       :linelength 88
                                       :indent-style "space"
                                       ))))))
  (use-package eglot-orderless
    :no-require t
    :after (eglot orderless)
    :config
    (add-to-list 'completion-category-overrides
                 '(eglot (styles orderless basic))))
#+END_SRC
** Treemacs
Treemacs.
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    ;;:init
    ;;(with-eval-after-load 'winum
    ;;  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (
     progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               nil
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil)
      )
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag))
    :after
    (treemacs-define-RET-action 'file-node-closed #'treemacs-visit-node-in-most-recently-used-window)
    (treemacs-define-RET-action 'file-node-open #'treemacs-visit-node-in-most-recently-used-window)
    )

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-nerd-icons
    :config
    (treemacs-load-theme "nerd-icons"))  

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs))
#+END_SRC
* Quality of life
** crux
A Collection of Ridiculously Useful eXtensions (=CRUX=) for =emacs=.
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)))
#+END_SRC
** Undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :ensure t
    :bind
    (("C-x u" . undo-fu-only-undo)
     ("C-x C-u" . undo-fu-only-redo)))
  (use-package undo-fu-session
    :ensure t
    :demand t
    :config
    (global-undo-fu-session-mode))
#+END_SRC
** Search
#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :bind
    (("C-s" . isearch-forward)
     ("C-r" . isearch-backward))
    :custom
    (isearch-lazy-count t)
    (isearch-lazy-highlight t)
    (isearch-lax-whitespace t))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-display-icons-p t
          dashboard-icon-type 'nerd-icons
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-items '((recents . 5)
                            ;;(projects . 5)
                            (agenda . 10)))
    :config
    (defun read-lines (filePath)
      "Return a list of lines of a file at filePath."
      (with-temp-buffer
        (insert-file-contents filePath)
        (split-string (buffer-string) "\n" t)))
    ;; Use file as random footer message
    ;;(setq dashboard-footer-messages (read-lines "~/.emacs.d/dashboard-quotes.txt"))
    
    ;; (defun dashboard-insert-custom (list-size)
    ;;   (insert "I really only love God as much as I love the person I love the least. (Dorothy Day)"))
    ;; (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
    ;; (add-to-list 'dashboard-items '(custom) t)
    (dashboard-setup-startup-hook))
#+END_SRC
** browse-ur
#+BEGIN_SRC emacs-lisp
  (use-package browse-url
    :defer t
    :custom
    (browse-url-browser-function 'browse-url-default-macosx-browser))
#+END_SRC




